#include <iostream>
#include <array>
#include <vector>
//фреймворк - система библиотек, которая решает какие то конкретные задачи
//коллекции в с++
// Все коллекции в STL - шаблонные классы
// STL - стандартная библиотека шаблонов
// STL только про с++
// 
// У каждого из этого типа шаблонов есть требования, чтобы они могли попасть в коллекцию
// 
// 
// Линейные коллекции{
//		последовательно хранят свои элементы(массив, vector)
//	Требования:
//		Это не может быть ссылка
//		Объект должен содержать конструктор по умолчанию и конструктор копирования
//		Не должен быть абстрактным классом
//		Публичный деструктор	
// 
// 
// 
// }
//
class Example {
public:
	Example() {
		std::cout << this << " Example default constructor\n";
	}
	~Example() {
		std::cout << this << "Example default destruct\n";//this показывает на конкретный объект класса
	}
	Example(int val) {
		val_ = val;
	}
	Example(const Example& other) {
		std::cout << this << "Example copy construct\n";
																																					
	}																																				
																																					
																																					
private:																																			
	int val_;																																		
																																					
};																																					
																																					
int main() {																																		
																																					
																																					
	//Example ex;																													
	//Example* ptr = &ex;																											
	//std::cout << ptr << std::endl;//один и тот же адрес, что и у деструктора														
																																	
	std::array<Example, 3> st_arr;//статический массив но выводит конструкторы														
	std::vector <Example> din_arr(3);//пустой вектор, но если передать размер, то не пустой											
																																	
	std::cout << "\n\n\n\n\n\n\n\n\\n\n\n\n\n\n\n\n\n\n\n\n\n\n";																	
																																	
	for (int i = 0; i < 10; i++)																									
	{																																
		din_arr.push_back(Example());//анонимный объект																				
	}																																
	//emplace_back вызывает меньше копирования чем push_back																5						
	// если есть данные для передачи в конструктор, то выгоднее использовать emplace					  ффффффффффффф
	// если у вас есть готовый объект то лучше отработает push_back										  ффффффффффффф
	// insert - создание 																				  ффффффффффффф
	// emplace - размещение 																			  ффффффффффффф													   фффффффффффффффф
	// 																									  ффффффффффффф													   фффффффффффффффф
	// коллекции - списки{																				  ффффффффффффф													   фффффффффффффффф
	//		list если есть возможность обойтись без них, то обходимся без них 							  ффффффффффффф													   фффффффффффффффф
	//		forward_list																				  ффффффффффффф													   фффффффффффффффф
	//																									  ффффффффффффф													   фффффффффффффффф
	// 																									  ффффффффффффф													   фффффффффффффффф
	// 																									  ффффффффффффф													   фффффффффффффффф
	// }																								  ффффффффффффф													   фффффффффффффффф
	// для них такой же список требованийы																  ффффффффффффф													   фффффффффффффффф
	// произвольного доступа нет, но очень быстрая вставка и удаление новых элементов					  ффффффффффффф													   фффффффффффффффф
	// 																									  ффффффффффффф													   фффффффффффффффф
	// Коллекции - деревья{																				  ффффффффффффф													   фффффффффффффффф
	//		set//интерпретация множества, проверяем входит элемент или не входит						  ффффффффффффф													   фффффффффффффффф
	//		multiset																					  ффффффффффффф													   фффффффффффффффф
	//		unordered_set																				  ффффффффффффф													   фффффффффффффффф
	//		unordered_multiset																			  ффффффффффффф													   фффффффффффффффф
	//		map																							  ффффффффффффф													   фффффффффффффффф
	//		multimap																					  ффффффффффффф													   фффффффффффффффф
	//		unordered_map																				  ффффффффффффф											ссссссссссс				   ссссссссссс
	//		unordered_multimap																			  ффффффффффффф											ссссссссссс				   ссссссссссс
	// 																									  ффффффффффффф											ссссссссссс				   ссссссссссс
	// 																									  ффффффффффффф											ссссссссссс				   ссссссссссс
	// }																								  ффффффффффффф											ссссссссссс				   ссссссссссс
	// требования: наличие оператора меньше																  ффффффффффффф											ссссссссссс				   ссссссссссс
	// там где multi можно хранить одинаковые объекты													  ффффффффффффф											ссссссссссс				   ссссссссссс
	// там где нет - уникальные																			  ффффффффффффф											ссссссссссс				   ссссссссссс
	// для unordered необходима в классе hesh функция													  ффффффффффффф
	//																									  ффффффффффффф

	Example a;
	Example b;

	return 0;
}
